/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "master_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace rpc { namespace master {


BinLogRequest::~BinLogRequest() throw() {
}


void BinLogRequest::__set_command(const std::string& val) {
  this->command = val;
}

void BinLogRequest::__set_key(const std::string& val) {
  this->key = val;
}

void BinLogRequest::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const BinLogRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BinLogRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->command);
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BinLogRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BinLogRequest");

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BinLogRequest &a, BinLogRequest &b) {
  using ::std::swap;
  swap(a.command, b.command);
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

BinLogRequest::BinLogRequest(const BinLogRequest& other0) {
  command = other0.command;
  key = other0.key;
  value = other0.value;
  __isset = other0.__isset;
}
BinLogRequest& BinLogRequest::operator=(const BinLogRequest& other1) {
  command = other1.command;
  key = other1.key;
  value = other1.value;
  __isset = other1.__isset;
  return *this;
}
void BinLogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BinLogRequest(";
  out << "command=" << to_string(command);
  out << ", " << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


BinLogResponse::~BinLogResponse() throw() {
}


void BinLogResponse::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const BinLogResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BinLogResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BinLogResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BinLogResponse");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BinLogResponse &a, BinLogResponse &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

BinLogResponse::BinLogResponse(const BinLogResponse& other2) {
  message = other2.message;
  __isset = other2.__isset;
}
BinLogResponse& BinLogResponse::operator=(const BinLogResponse& other3) {
  message = other3.message;
  __isset = other3.__isset;
  return *this;
}
void BinLogResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BinLogResponse(";
  out << "message=" << to_string(message);
  out << ")";
}


GetRequest::~GetRequest() throw() {
}


void GetRequest::__set_key(const std::string& val) {
  this->key = val;
}
std::ostream& operator<<(std::ostream& out, const GetRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetRequest");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRequest &a, GetRequest &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

GetRequest::GetRequest(const GetRequest& other4) {
  key = other4.key;
  __isset = other4.__isset;
}
GetRequest& GetRequest::operator=(const GetRequest& other5) {
  key = other5.key;
  __isset = other5.__isset;
  return *this;
}
void GetRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRequest(";
  out << "key=" << to_string(key);
  out << ")";
}


GetResponse::~GetResponse() throw() {
}


void GetResponse::__set_value(const std::string& val) {
  this->value = val;
}

void GetResponse::__set_message(const std::string& val) {
  this->message = val;
}

void GetResponse::__set_connection_id(const int64_t val) {
  this->connection_id = val;
}
std::ostream& operator<<(std::ostream& out, const GetResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->connection_id);
          this->__isset.connection_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetResponse");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("connection_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->connection_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetResponse &a, GetResponse &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.message, b.message);
  swap(a.connection_id, b.connection_id);
  swap(a.__isset, b.__isset);
}

GetResponse::GetResponse(const GetResponse& other6) {
  value = other6.value;
  message = other6.message;
  connection_id = other6.connection_id;
  __isset = other6.__isset;
}
GetResponse& GetResponse::operator=(const GetResponse& other7) {
  value = other7.value;
  message = other7.message;
  connection_id = other7.connection_id;
  __isset = other7.__isset;
  return *this;
}
void GetResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetResponse(";
  out << "value=" << to_string(value);
  out << ", " << "message=" << to_string(message);
  out << ", " << "connection_id=" << to_string(connection_id);
  out << ")";
}


SetRequest::~SetRequest() throw() {
}


void SetRequest::__set_key(const std::string& val) {
  this->key = val;
}

void SetRequest::__set_value(const std::string& val) {
  this->value = val;
}

void SetRequest::__set_func_call(const std::string& val) {
  this->func_call = val;
}
std::ostream& operator<<(std::ostream& out, const SetRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->func_call);
          this->__isset.func_call = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SetRequest");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("func_call", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->func_call);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetRequest &a, SetRequest &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.func_call, b.func_call);
  swap(a.__isset, b.__isset);
}

SetRequest::SetRequest(const SetRequest& other8) {
  key = other8.key;
  value = other8.value;
  func_call = other8.func_call;
  __isset = other8.__isset;
}
SetRequest& SetRequest::operator=(const SetRequest& other9) {
  key = other9.key;
  value = other9.value;
  func_call = other9.func_call;
  __isset = other9.__isset;
  return *this;
}
void SetRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetRequest(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ", " << "func_call=" << to_string(func_call);
  out << ")";
}


SetResponse::~SetResponse() throw() {
}


void SetResponse::__set_connection_id(const int64_t val) {
  this->connection_id = val;
}

void SetResponse::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const SetResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->connection_id);
          this->__isset.connection_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SetResponse");

  xfer += oprot->writeFieldBegin("connection_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->connection_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetResponse &a, SetResponse &b) {
  using ::std::swap;
  swap(a.connection_id, b.connection_id);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

SetResponse::SetResponse(const SetResponse& other10) {
  connection_id = other10.connection_id;
  message = other10.message;
  __isset = other10.__isset;
}
SetResponse& SetResponse::operator=(const SetResponse& other11) {
  connection_id = other11.connection_id;
  message = other11.message;
  __isset = other11.__isset;
  return *this;
}
void SetResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetResponse(";
  out << "connection_id=" << to_string(connection_id);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


DelRequest::~DelRequest() throw() {
}


void DelRequest::__set_key(const std::string& val) {
  this->key = val;
}
std::ostream& operator<<(std::ostream& out, const DelRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DelRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DelRequest");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DelRequest &a, DelRequest &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

DelRequest::DelRequest(const DelRequest& other12) {
  key = other12.key;
  __isset = other12.__isset;
}
DelRequest& DelRequest::operator=(const DelRequest& other13) {
  key = other13.key;
  __isset = other13.__isset;
  return *this;
}
void DelRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DelRequest(";
  out << "key=" << to_string(key);
  out << ")";
}


DelResponse::~DelResponse() throw() {
}


void DelResponse::__set_connection_id(const int64_t val) {
  this->connection_id = val;
}

void DelResponse::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const DelResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DelResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->connection_id);
          this->__isset.connection_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DelResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DelResponse");

  xfer += oprot->writeFieldBegin("connection_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->connection_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DelResponse &a, DelResponse &b) {
  using ::std::swap;
  swap(a.connection_id, b.connection_id);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

DelResponse::DelResponse(const DelResponse& other14) {
  connection_id = other14.connection_id;
  message = other14.message;
  __isset = other14.__isset;
}
DelResponse& DelResponse::operator=(const DelResponse& other15) {
  connection_id = other15.connection_id;
  message = other15.message;
  __isset = other15.__isset;
  return *this;
}
void DelResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DelResponse(";
  out << "connection_id=" << to_string(connection_id);
  out << ", " << "message=" << to_string(message);
  out << ")";
}

}} // namespace
